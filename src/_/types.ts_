/* eslint-disable @typescript-eslint/no-explicit-any */
export interface IStateProps<E, V> {
    readonly value: V | null;
    readonly errors: E | null;
    readonly touched: boolean;
    readonly busy: boolean;
}

export interface IState<E, V> extends IStateProps<E, V> {
    reset(): this;
    update(props: Partial<IStateProps<E, V>>): this;
    clone(): this;
    getProps(): IStateProps<E, V>;
}

export type THostErrors = {[name: string]: string[]};
export type TSourceErrors = string[];

export type THostProps = IStateProps<THostErrors, object>;
export type TSourceProps<V = any> = IStateProps<TSourceErrors, V>;

export type THostState = IState<THostErrors, object>;
export type TSourceState<V = any> = IState<TSourceErrors, V>;

export type TStateListener<T> = (stateProps: T) => void;
export type THostStateListener = TStateListener<THostProps>;
export type TSourceStateListener = TStateListener<TSourceProps>;

export interface ISourceStates {
    [name: string]: TSourceState;
}

export interface IListeners {
    host: THostStateListener[];
    source: {
        [name: string]: TSourceStateListener[];
    };
}

export interface ISourceActions {
    listen: (listener: TSourceStateListener) => () => void;
    preUpdate: (value: any) => void;
    update: (value: any) => void;
}

export interface IValidator {
    validate: (name:  string|number, value: any) => Promise<TSourceErrors|null>;
}